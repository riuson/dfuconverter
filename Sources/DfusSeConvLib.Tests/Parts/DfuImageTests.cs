using DfuSeConvLib.Extensions;
using DfuSeConvLib.Parts;
using NUnit.Framework;
using System.IO;
using System.Linq;

namespace DfuSeConvLib.Tests.Parts {
    [TestFixture]
    public class DfuImageTests {
        [Test]
        public void CanWrite() {
            var sampleData1 = new byte[] { 1, 2, 3, 4 };
            var sampleData2 = new byte[] { 5, 6, 7, 8 };
            var sut = new DfuImage();
            sut.Prefix = new TargetPrefix {
                AlternateSetting = 7,
                TargetNamed = true,
                TargetName = string.Join("", Enumerable.Range(0, 50).Select(_ => "SAMPLE")) // Fill all available space
            };
            sut.ImageElements.Add(new ImageElement { ElementAddress = 0x08000000, Data = sampleData1 });
            sut.ImageElements.Add(new ImageElement { ElementAddress = 0x08000100, Data = sampleData2 });

            // Array generated by DFU File Manager v3.0.6
            var expected = new byte[] {
                0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
                0x07,
                0x01, 0x00, 0x00, 0x00,
                0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C,
                0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50,
                0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D,
                0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41,
                0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53,
                0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45,
                0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C,
                0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50,
                0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D,
                0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41,
                0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53,
                0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45,
                0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C,
                0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50,
                0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D, 0x50, 0x4C, 0x45, 0x53, 0x41, 0x4D,
                0x18, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00,

                0x00, 0x00, 0x00, 0x08,
                0x04, 0x00, 0x00, 0x00,
                0x01, 0x02, 0x03, 0x04,

                0x00, 0x01, 0x00, 0x08,
                0x04, 0x00, 0x00, 0x00,
                0x05, 0x06, 0x07, 0x08
            };

            var tempStream = new MemoryStream();
            sut.Write(tempStream);

            var actual = tempStream.ToArray();

            Assert.That(actual, Is.EqualTo(expected));
        }
    }
}
