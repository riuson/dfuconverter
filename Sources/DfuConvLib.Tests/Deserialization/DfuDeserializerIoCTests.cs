using DfuConvLib.Deserialization;
using NUnit.Framework;
using System.IO;
using System.Linq;

namespace DfuConvLib.Tests.Deserialization {
    [TestFixture]
    public class DfuDeserializerIoCTests : IoCSupportedTest<DfuLogicModule> {
        [OneTimeTearDown]
        public void TearDown() {
            this.ShutdownIoC();
        }

        [Test]
        public void CanReadReal() {
            var sampleData = new byte[] { 1, 2, 3, 4 };

            // Array generated by DFU File Manager v3.0.6
            var sample = new byte[] {
                0x44, 0x66, 0x75, 0x53, 0x65,
                0x01,
                0x29, 0x01, 0x00, 0x00,
                0x01,

                0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
                0x02,
                0x01, 0x00, 0x00, 0x00,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
                0x0C, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00,

                0x00, 0x00, 0x00, 0x08,
                0x04, 0x00, 0x00, 0x00,
                0x01, 0x02, 0x03, 0x04,

                0x78, 0x56,
                0x34, 0x12,
                0x83, 0x04,
                0x1A, 0x01,
                0x55, 0x46, 0x44,
                0x10,
                0xB7, 0x02, 0xE0, 0x8D
            };

            var sut = this.Resolve<DfuDeserializer>();

            var tempStream = new MemoryStream(sample, false);
            var dfu = sut.Read(tempStream);

            Assert.That(dfu.Prefix.Signature, Is.EqualTo("DfuSe"));
            Assert.That(dfu.Prefix.Version, Is.EqualTo(1));
            Assert.That(dfu.Prefix.DfuImageSize, Is.EqualTo(0x129));
            Assert.That(dfu.Prefix.Targets, Is.EqualTo(1));

            Assert.That(dfu.Suffix.Device, Is.EqualTo(0x5678));
            Assert.That(dfu.Suffix.Product, Is.EqualTo(0x1234));
            Assert.That(dfu.Suffix.Vendor, Is.EqualTo(0x0483));
            Assert.That(dfu.Suffix.Dfu, Is.EqualTo(0x011a));
            Assert.That(dfu.Suffix.DfuSignature, Is.EqualTo("UFD"));
            Assert.That(dfu.Suffix.Length, Is.EqualTo(16));

            Assert.That(dfu.Images.Images.Count, Is.EqualTo(1));

            var dfuImage = dfu.Images.Images.First();
            var targetPrefix = dfuImage.Prefix;
            Assert.That(targetPrefix.AlternateSetting, Is.EqualTo(2));
            Assert.That(targetPrefix.Signature, Is.EqualTo("Target"));
            Assert.That(targetPrefix.IsTargetNamed, Is.True);
            Assert.That(targetPrefix.TargetName, Is.EqualTo(new string('Q', 255)));

            Assert.That(dfuImage.ImageElements.Count, Is.EqualTo(1));
            var imageElement = dfuImage.ImageElements.First();
            Assert.That(imageElement.ElementAddress, Is.EqualTo(0x08000000));
            Assert.That(imageElement.ElementSize, Is.EqualTo(sampleData.Length));
            Assert.That(imageElement.Data, Is.EqualTo(sampleData));
        }
    }
}
