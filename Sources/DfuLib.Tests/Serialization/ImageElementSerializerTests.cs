using DfuLib.Interfaces;
using DfuLib.Serialization;
using Moq;
using NUnit.Framework;
using System;
using System.IO;

namespace DfuLib.Tests.Serialization {
    [TestFixture]
    public class ImageElementSerializerTests {
        [Test]
        public void CanWrite() {
            var sample = new byte[] {
                0x44, 0x66, 0x75, 0x53, 0x65, 0x01, 0x9F, 0xD4, 0x00, 0x00, 0x02, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
                0x01, 0x01, 0x00, 0x00, 0x00, 0x54, 0x41, 0x52, 0x47, 0x4E, 0x41, 0x4D, 0x45, 0x00, 0x72, 0x6F, 0x6A,
                0x65, 0x63, 0x74, 0x73, 0x5C, 0x44, 0x65, 0x73, 0x6B, 0x74, 0x6F, 0x70, 0x5C, 0x44, 0x66, 0x75, 0x53,
                0x65
            };

            var expected = new byte[] {
                0x00, 0x00, 0x00, 0x08,
                0x34, 0x00, 0x00, 0x00,
                0x44, 0x66, 0x75, 0x53, 0x65, 0x01, 0x9F, 0xD4, 0x00, 0x00, 0x02, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
                0x01, 0x01, 0x00, 0x00, 0x00, 0x54, 0x41, 0x52, 0x47, 0x4E, 0x41, 0x4D, 0x45, 0x00, 0x72, 0x6F, 0x6A,
                0x65, 0x63, 0x74, 0x73, 0x5C, 0x44, 0x65, 0x73, 0x6B, 0x74, 0x6F, 0x70, 0x5C, 0x44, 0x66, 0x75, 0x53,
                0x65
            };

            var imageElementMock = new Mock<IImageElement>();
            imageElementMock.SetupGet(x => x.ElementAddress).Returns(0x08000000);
            imageElementMock.SetupGet(x => x.Data).Returns(sample);
            imageElementMock.SetupGet(x => x.ElementSize).Returns(Convert.ToUInt32(sample.Length));

            var sut = new ImageElementSerializer();

            var tempStream = new MemoryStream();
            sut.Write(tempStream, imageElementMock.Object);

            var actual = tempStream.ToArray();

            Assert.That(sut.GetSize(imageElementMock.Object), Is.EqualTo(Convert.ToUInt32(sample.Length + 8)));
            Assert.That(actual, Is.EqualTo(expected));
        }
    }
}
